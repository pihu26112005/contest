#include <bits/stdc++.h>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t; // Number of test cases
    while (t--) {
        long long n, l, r;
        cin >> n >> l >> r;
        assert(l == r); // Easy version constraint
        long long m = l;
        vector<int> a(n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
        }
        // Precompute prefix XOR array
        vector<int> s(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            s[i] = s[i - 1] ^ a[i];
        }
        // Memoized function to compute s_k
        map<long long, int> memo;
        function<int(long long)> get_s = [&](long long k) -> int {
            if (k <= n) return s[k];
            if (memo.count(k)) return memo[k];
            return memo[k] = get_s(k - 1) ^ get_s(k / 2);
        };
        // Compute a_m
        int answer = (m <= n) ? a[m] : get_s(m / 2);
        cout << answer << "\n";
    }
    return 0;
}